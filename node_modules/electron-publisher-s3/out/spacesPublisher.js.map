{"version":3,"sources":["../src/spacesPublisher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEc,MAAA,eAAA,SAA+B,kCAA/B,CAA8C;AAG1D,cAAY,OAAZ,EAAsD,IAAtD,EAAyE;AACvE,UAAM,OAAN,EAAe,IAAf;AADoD,SAAA,IAAA,GAAA,IAAA;AAF7C,SAAA,YAAA,GAAe,QAAf;AAIR;;AAED,SAAa,sBAAb,CAAoC,OAApC,EAA4D,qBAA5D,EAAkG,aAAlG,EAAwH;AAAA;AACtH,UAAI,QAAQ,IAAR,IAAgB,IAApB,EAA0B;AACxB,cAAM,KAAI,wCAAJ,EAA8B,0HAA9B,CAAN;AACD;;AACD,UAAI,QAAQ,MAAR,IAAkB,IAAtB,EAA4B;AAC1B,cAAM,KAAI,wCAAJ,EAA8B,4HAA9B,CAAN;AACD;;AAED,UAAI,QAAQ,OAAR,IAAmB,IAAnB,IAA2B,yBAAyB,IAAxD,EAA8D;AAC5D,gBAAQ,OAAR,GAAkB,qBAAlB;AACD;AAVqH;AAWvH;;AAES,kBAAa;AACrB,WAAO,KAAK,IAAL,CAAU,IAAjB;AACD;;AAES,8BAAyB;AACjC,UAAM,gBAAgB,MAAM,yBAAN,EAAtB;AACA,kBAAc,QAAd,GAAyB,GAAG,KAAK,IAAL,CAAU,MAAM,yBAA5C;AACA,UAAM,cAAc,QAAQ,GAAR,CAAY,SAAhC;AACA,UAAM,kBAAkB,QAAQ,GAAR,CAAY,aAApC;;AACA,QAAI,oCAAgB,WAAhB,CAAJ,EAAkC;AAChC,YAAM,KAAI,wCAAJ,EAA8B,+FAA9B,CAAN;AACD;;AACD,QAAI,oCAAgB,eAAhB,CAAJ,EAAsC;AACpC,YAAM,KAAI,wCAAJ,EAA8B,mGAA9B,CAAN;AACD;;AAED,kBAAc,WAAd,GAA4B;AAAC,iBAAD;AAAc;AAAd,KAA5B;AACA,WAAO,aAAP;AACD;;AAES,qBAAmB,SAAnB,EAA0D;AAClE,UAAM,kBAAN,CAAyB,SAAzB;AACD;;AA1CyD","sourcesContent":["import { ClientConfiguration, CreateMultipartUploadRequest } from \"aws-sdk/clients/s3\"\nimport { InvalidConfigurationError, isEmptyOrSpaces } from \"builder-util\"\nimport { SpacesOptions } from \"builder-util-runtime\"\nimport { PublishContext } from \"electron-publish\"\nimport { BaseS3Publisher } from \"./BaseS3Publisher\"\n\nexport default class SpacesPublisher extends BaseS3Publisher {\n  readonly providerName = \"Spaces\"\n\n  constructor(context: PublishContext, private readonly info: SpacesOptions) {\n    super(context, info)\n  }\n\n  static async checkAndResolveOptions(options: SpacesOptions, channelFromAppVersion: string | null, errorIfCannot: boolean) {\n    if (options.name == null) {\n      throw new InvalidConfigurationError(`Please specify \"name\" for \"spaces\" publish provider (see https://www.electron.build/configuration/publish#spacesoptions)`)\n    }\n    if (options.region == null) {\n      throw new InvalidConfigurationError(`Please specify \"region\" for \"spaces\" publish provider (see https://www.electron.build/configuration/publish#spacesoptions)`)\n    }\n\n    if (options.channel == null && channelFromAppVersion != null) {\n      options.channel = channelFromAppVersion\n    }\n  }\n\n  protected getBucketName(): string {\n    return this.info.name\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    const configuration = super.createClientConfiguration()\n    configuration.endpoint = `${this.info.region}.digitaloceanspaces.com`\n    const accessKeyId = process.env.DO_KEY_ID\n    const secretAccessKey = process.env.DO_SECRET_KEY\n    if (isEmptyOrSpaces(accessKeyId)) {\n      throw new InvalidConfigurationError(\"Please set env DO_KEY_ID (see https://www.electron.build/configuration/publish#spacesoptions)\")\n    }\n    if (isEmptyOrSpaces(secretAccessKey)) {\n      throw new InvalidConfigurationError(\"Please set env DO_SECRET_KEY (see https://www.electron.build/configuration/publish#spacesoptions)\")\n    }\n\n    configuration.credentials = {accessKeyId, secretAccessKey}\n    return configuration\n  }\n\n  protected configureS3Options(s3Options: CreateMultipartUploadRequest): void {\n    super.configureS3Options(s3Options)\n  }\n}"],"sourceRoot":""}
