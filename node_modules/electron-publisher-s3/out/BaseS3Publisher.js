"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseS3Publisher = void 0;

function _bluebirdLst() {
  const data = require("bluebird-lst");

  _bluebirdLst = function () {
    return data;
  };

  return data;
}

function _s() {
  const data = _interopRequireDefault(require("aws-sdk/clients/s3"));

  _s = function () {
    return data;
  };

  return data;
}

function _builderUtil() {
  const data = require("builder-util");

  _builderUtil = function () {
    return data;
  };

  return data;
}

function _electronPublish() {
  const data = require("electron-publish");

  _electronPublish = function () {
    return data;
  };

  return data;
}

function _fsExtraP() {
  const data = require("fs-extra-p");

  _fsExtraP = function () {
    return data;
  };

  return data;
}

function _mime() {
  const data = _interopRequireDefault(require("mime"));

  _mime = function () {
    return data;
  };

  return data;
}

var path = _interopRequireWildcard(require("path"));

function _uploader() {
  const data = require("./uploader");

  _uploader = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BaseS3Publisher extends _electronPublish().Publisher {
  constructor(context, options) {
    super(context);
    this.options = options;
  }

  configureS3Options(s3Options) {
    // if explicitly set to null, do not add
    if (this.options.acl !== null) {
      s3Options.ACL = this.options.acl || "public-read";
    }
  }

  createClientConfiguration() {
    return {
      signatureVersion: "v4"
    };
  } // http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html


  upload(task) {
    var _this = this;

    return (0, _bluebirdLst().coroutine)(function* () {
      const fileName = path.basename(task.file);
      const cancellationToken = _this.context.cancellationToken;
      const target = (_this.options.path == null ? "" : `${_this.options.path}/`) + fileName;

      if (process.env.__TEST_S3_PUBLISHER__ != null) {
        const testFile = path.join(process.env.__TEST_S3_PUBLISHER__, target);
        yield (0, _fsExtraP().ensureDir)(path.dirname(testFile));
        yield (0, _fsExtraP().symlink)(task.file, testFile);
        return;
      }

      const s3Options = {
        Key: target,
        Bucket: _this.getBucketName(),
        ContentType: _mime().default.getType(task.file) || "application/octet-stream"
      };

      _this.configureS3Options(s3Options);

      const contentLength = task.fileContent == null ? (yield (0, _fsExtraP().stat)(task.file)).size : task.fileContent.length;
      const uploader = new (_uploader().Uploader)(new (_s().default)(_this.createClientConfiguration()), s3Options, task.file, contentLength, task.fileContent);

      const progressBar = _this.createProgressBar(fileName, uploader.contentLength);

      if (progressBar != null) {
        const callback = new (_electronPublish().ProgressCallback)(progressBar);
        uploader.on("progress", () => {
          if (!cancellationToken.cancelled) {
            callback.update(uploader.loaded, uploader.contentLength);
          }
        });
      }

      return yield cancellationToken.createPromise((resolve, reject, onCancel) => {
        onCancel(() => uploader.abort());
        uploader.upload().then(() => {
          try {
            _builderUtil().log.debug({
              provider: _this.providerName,
              file: fileName,
              bucket: _this.getBucketName()
            }, "uploaded");
          } finally {
            resolve();
          }
        }).catch(reject);
      });
    })();
  }

  toString() {
    return `${this.providerName} (bucket: ${this.getBucketName()})`;
  }

}

exports.BaseS3Publisher = BaseS3Publisher;
//# sourceMappingURL=BaseS3Publisher.js.map