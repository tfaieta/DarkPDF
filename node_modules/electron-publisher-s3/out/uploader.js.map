{"version":3,"sources":["../src/uploader.ts"],"names":[],"mappings":"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","sourcesContent":["import { config as awsConfig, S3 } from \"aws-sdk\"\nimport { CreateMultipartUploadRequest } from \"aws-sdk/clients/s3\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { hashFile } from \"builder-util\"\nimport { EventEmitter } from \"events\"\nimport { createReadStream } from \"fs-extra-p\"\nimport { cpus } from \"os\"\nimport { createHash } from \"crypto\"\n\nconst MAX_PUT_OBJECT_SIZE = 5 * 1024 * 1024 * 1024\nconst MAX_MULTIPART_COUNT = 10000\nconst MIN_MULTIPART_SIZE = 5 * 1024 * 1024\nconst commonUploadSize = 15 * 1024 * 1024\n\nawsConfig.setPromisesDependency(require(\"bluebird-lst\"))\n\nexport class Uploader extends EventEmitter {\n  /** @readonly */\n  loaded = 0\n\n  private cancelled = false\n\n  readonly s3RetryCount: number\n  readonly s3RetryDelay: number\n  readonly multipartUploadThreshold: number\n  readonly multipartUploadSize: number\n  readonly multipartDownloadThreshold: number\n  readonly multipartDownloadSize: number\n\n  constructor(private readonly s3: S3, private readonly s3Options: CreateMultipartUploadRequest, private readonly localFile: string, readonly contentLength: number, private readonly fileContent: Buffer | null | undefined) {\n    super()\n\n    this.s3RetryCount = 3\n    this.s3RetryDelay = 1000\n\n    this.multipartUploadThreshold = (20 * 1024 * 1024)\n    this.multipartUploadSize = commonUploadSize\n    this.multipartDownloadThreshold = (20 * 1024 * 1024)\n    this.multipartDownloadSize = commonUploadSize\n\n    if (this.multipartUploadThreshold < MIN_MULTIPART_SIZE) {\n      throw new Error(\"Minimum multipartUploadThreshold is 5MB.\")\n    }\n    if (this.multipartUploadThreshold > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(\"Maximum multipartUploadThreshold is 5GB.\")\n    }\n    if (this.multipartUploadSize < MIN_MULTIPART_SIZE) {\n      throw new Error(\"Minimum multipartUploadSize is 5MB.\")\n    }\n    if (this.multipartUploadSize > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(\"Maximum multipartUploadSize is 5GB.\")\n    }\n  }\n\n  async upload() {\n    const fileContent = this.fileContent\n    if (fileContent != null) {\n      const hash = createHash(\"md5\")\n      hash.update(fileContent)\n      const md5 = hash.digest(\"base64\")\n      await this.runOrRetry(() => this.putObject(md5))\n      return\n    }\n\n    if (this.contentLength < this.multipartUploadThreshold) {\n      const md5 = await hashFile(this.localFile, \"md5\")\n      await this.runOrRetry(() => this.putObject(md5))\n      return\n    }\n\n    let multipartUploadSize = this.multipartUploadSize\n    if (Math.ceil(this.contentLength / multipartUploadSize) > MAX_MULTIPART_COUNT) {\n      multipartUploadSize = smallestPartSizeFromFileSize(this.contentLength)\n    }\n\n    if (multipartUploadSize > MAX_PUT_OBJECT_SIZE) {\n      throw new Error(`File size exceeds maximum object size: ${this.localFile}`)\n    }\n\n    const data = await this.runOrRetry(() => this.s3.createMultipartUpload(this.s3Options).promise())\n    await this.multipartUpload(data.UploadId!, multipartUploadSize)\n  }\n\n  abort() {\n    this.cancelled = true\n  }\n\n  private putObject(md5: string) {\n    this.loaded = 0\n    return new Promise<any>((resolve, reject) => {\n      this.s3.putObject({\n        Body: this.fileContent || createReadStream(this.localFile),\n        ContentMD5: md5,\n        ...this.s3Options,\n      })\n        .on(\"httpUploadProgress\", progress => {\n          this.loaded = progress.loaded\n          this.emit(\"progress\")\n        })\n        .send((error, data) => {\n          if (error == null) {\n            resolve(data)\n          }\n          else {\n            reject(error)\n          }\n        })\n    })\n  }\n\n  private async multipartUpload(uploadId: string, multipartUploadSize: number): Promise<any> {\n    let cursor = 0\n    let nextPartNumber = 1\n\n    const partsA: Array<any> = []\n\n    const parts: Array<Part> = []\n    while (cursor < this.contentLength) {\n      const start = cursor\n      let end = cursor + multipartUploadSize\n      if (end > this.contentLength) {\n        end = this.contentLength\n      }\n      cursor = end\n      const part = {\n        PartNumber: nextPartNumber++,\n      }\n      partsA.push(part)\n      parts.push({start, end, part, md5: \"\"})\n    }\n\n    await BluebirdPromise.map(parts, async it => {\n      // hashFile - both start and end are inclusive\n      it.md5 = await hashFile(this.localFile, \"md5\", \"base64\", {start: it.start, end: it.end - 1})\n    }, {concurrency: cpus().length})\n\n    await BluebirdPromise.map(parts, it => this.makeUploadPart(it, uploadId), {concurrency: 4})\n    return await this.runOrRetry(() => this.s3.completeMultipartUpload({\n        Bucket: this.s3Options.Bucket,\n        Key: this.s3Options.Key,\n        UploadId: uploadId,\n        MultipartUpload: {\n          Parts: partsA,\n        },\n      }).promise()\n    )\n  }\n\n  private makeUploadPart(part: Part, uploadId: string): Promise<any> {\n    const contentLength = part.end - part.start\n    return this.runOrRetry(() => {\n      let partLoaded = 0\n      return new Promise((resolve, reject) => {\n        this.s3.uploadPart({\n          ContentLength: contentLength,\n          PartNumber: part.part.PartNumber,\n          UploadId: uploadId,\n          Body: createReadStream(this.localFile, {start: part.start, end: part.end - 1}),\n          Bucket: this.s3Options.Bucket,\n          Key: this.s3Options.Key,\n          ContentMD5: part.md5,\n        })\n          .on(\"httpUploadProgress\", progress => {\n            partLoaded = progress.loaded\n            this.loaded += progress.loaded\n            this.emit(\"progress\")\n          })\n          .send((error, data) => {\n            if (error == null) {\n              part.part.ETag = data.ETag\n              resolve(data)\n            }\n            else {\n              this.loaded -= partLoaded\n              reject(error)\n            }\n          })\n      })\n    })\n  }\n\n  private async runOrRetry<T>(task: () => Promise<T>): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      let attemptNumber = 0\n      const tryRun = () => {\n        if (this.cancelled) {\n          return\n        }\n\n        task()\n          .then(resolve)\n          .catch(error => {\n            if (++attemptNumber >= this.s3RetryCount) {\n              reject(error)\n            }\n            else if (this.cancelled) {\n              reject(new Error(\"cancelled\"))\n            }\n            else {\n              setTimeout(tryRun, this.s3RetryDelay)\n            }\n          })\n      }\n\n      tryRun()\n    })\n  }\n}\n\ninterface Part {\n  start: number\n  end: number\n  part: any\n  md5: string\n}\n\nfunction smallestPartSizeFromFileSize(fileSize: number) {\n  const partSize = Math.ceil(fileSize / MAX_MULTIPART_COUNT)\n  return partSize < MIN_MULTIPART_SIZE ? MIN_MULTIPART_SIZE : partSize\n}"],"sourceRoot":""}
