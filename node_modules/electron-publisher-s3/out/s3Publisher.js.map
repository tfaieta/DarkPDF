{"version":3,"sources":["../src/s3Publisher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEc,MAAA,WAAA,SAA2B,kCAA3B,CAA0C;AAGtD,cAAY,OAAZ,EAAsD,IAAtD,EAAqE;AACnE,UAAM,OAAN,EAAe,IAAf;AADoD,SAAA,IAAA,GAAA,IAAA;AAF7C,SAAA,YAAA,GAAe,IAAf;AAIR;;AAED,SAAa,sBAAb,CAAoC,OAApC,EAAwD,qBAAxD,EAA8F,aAA9F,EAAoH;AAAA;AAClH,YAAM,SAAS,QAAQ,MAAvB;;AACA,UAAI,UAAU,IAAd,EAAoB;AAClB,cAAM,KAAI,wCAAJ,EAA8B,mDAA9B,CAAN;AACD;;AAED,UAAI,QAAQ,QAAR,IAAoB,IAApB,IAA6B,OAAO,QAAP,CAAgB,GAAhB,KAAwB,QAAQ,MAAR,IAAkB,IAA3E,EAAkF;AAChF;AACA,cAAM,KAAK,KAAI,YAAJ,EAAO;AAAC,4BAAkB;AAAnB,SAAP,CAAX;;AACA,YAAI;AACF,kBAAQ,MAAR,GAAiB,CAAC,MAAM,GAAG,iBAAH,CAAqB;AAAC,oBAAQ;AAAT,WAArB,EAAuC,OAAvC,EAAP,EAAyD,kBAA1E;AACD,SAFD,CAGA,OAAO,CAAP,EAAU;AACR,cAAI,aAAJ,EAAmB;AACjB,kBAAM,CAAN;AACD,WAFD,MAGK;AACH,+BAAI,IAAJ,CAAS,yHAAyH,CAAC,EAAnI;AACD;AACF;AACF;;AAED,UAAI,QAAQ,OAAR,IAAmB,IAAnB,IAA2B,yBAAyB,IAAxD,EAA8D;AAC5D,gBAAQ,OAAR,GAAkB,qBAAlB;AACD;AAxBiH;AAyBnH;;AAES,8BAAyB;AACjC,UAAM,gBAAgB,MAAM,yBAAN,EAAtB;AACA,UAAM,WAAW,KAAK,IAAL,CAAU,QAA3B;;AACA,QAAI,YAAY,IAAhB,EAAsB;AACpB,oBAAc,QAAd,GAAyB,QAAzB;AACA,oBAAc,gBAAd,GAAiC,IAAjC;AACD;;AACD,WAAO,aAAP;AACD;;AAES,kBAAa;AACrB,WAAO,KAAK,IAAL,CAAU,MAAjB;AACD;;AAES,qBAAmB,SAAnB,EAA6D;AACrE,UAAM,kBAAN,CAAyB,SAAzB;;AAEA,QAAI,KAAK,IAAL,CAAU,YAAV,IAA0B,IAA9B,EAAoC;AAClC,gBAAU,YAAV,GAAyB,KAAK,IAAL,CAAU,YAAnC;AACD;;AAED,QAAI,KAAK,IAAL,CAAU,UAAV,IAAwB,IAA5B,EAAkC;AAChC,gBAAU,oBAAV,GAAiC,KAAK,IAAL,CAAU,UAA3C;AACD;AACF;;AAED,aAAQ;AACN,UAAM,SAAS,MAAM,QAAN,EAAf;AACA,UAAM,WAAW,KAAK,IAAL,CAAU,QAA3B;;AACA,QAAI,YAAY,IAAhB,EAAsB;AACpB,aAAO,OAAO,SAAP,CAAiB,CAAjB,EAAoB,OAAO,MAAP,GAAgB,CAApC,IAAyC,eAAe,QAAQ,GAAvE;AACD;;AACD,WAAO,MAAP;AACD;;AAnEqD","sourcesContent":["import S3, { ClientConfiguration, ServerSideEncryption, StorageClass } from \"aws-sdk/clients/s3\"\nimport { InvalidConfigurationError, log } from \"builder-util\"\nimport { S3Options } from \"builder-util-runtime\"\nimport { PublishContext } from \"electron-publish\"\nimport { BaseS3Publisher } from \"./BaseS3Publisher\"\n\nexport default class S3Publisher extends BaseS3Publisher {\n  readonly providerName = \"S3\"\n\n  constructor(context: PublishContext, private readonly info: S3Options) {\n    super(context, info)\n  }\n\n  static async checkAndResolveOptions(options: S3Options, channelFromAppVersion: string | null, errorIfCannot: boolean) {\n    const bucket = options.bucket\n    if (bucket == null) {\n      throw new InvalidConfigurationError(`Please specify \"bucket\" for \"s3\" publish provider`)\n    }\n\n    if (options.endpoint == null && (bucket.includes(\".\") && options.region == null)) {\n      // on dotted bucket names, we need to use a path-based endpoint URL. Path-based endpoint URLs need to include the region.\n      const s3 = new S3({signatureVersion: \"v4\"})\n      try {\n        options.region = (await s3.getBucketLocation({Bucket: bucket}).promise()).LocationConstraint\n      }\n      catch (e) {\n        if (errorIfCannot) {\n          throw e\n        }\n        else {\n          log.warn(`cannot compute region for bucket (required because on dotted bucket names, we need to use a path-based endpoint URL): ${e}`)\n        }\n      }\n    }\n\n    if (options.channel == null && channelFromAppVersion != null) {\n      options.channel = channelFromAppVersion\n    }\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    const configuration = super.createClientConfiguration()\n    const endpoint = this.info.endpoint\n    if (endpoint != null) {\n      configuration.endpoint = endpoint\n      configuration.s3ForcePathStyle = true\n    }\n    return configuration\n  }\n\n  protected getBucketName(): string {\n    return this.info.bucket!\n  }\n\n  protected configureS3Options(s3Options: S3.CreateMultipartUploadRequest): void {\n    super.configureS3Options(s3Options)\n\n    if (this.info.storageClass != null) {\n      s3Options.StorageClass = this.info.storageClass as StorageClass\n    }\n\n    if (this.info.encryption != null) {\n      s3Options.ServerSideEncryption = this.info.encryption as ServerSideEncryption\n    }\n  }\n\n  toString() {\n    const result = super.toString()\n    const endpoint = this.info.endpoint\n    if (endpoint != null) {\n      return result.substring(0, result.length - 1) + `, endpoint: ${endpoint})`\n    }\n    return result\n  }\n}\n"],"sourceRoot":""}
