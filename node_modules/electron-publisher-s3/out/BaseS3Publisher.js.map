{"version":3,"sources":["../src/BaseS3Publisher.ts"],"names":[],"mappings":"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","sourcesContent":["import S3, { ClientConfiguration, CreateMultipartUploadRequest, ObjectCannedACL } from \"aws-sdk/clients/s3\"\nimport { log } from \"builder-util\"\nimport { BaseS3Options } from \"builder-util-runtime\"\nimport { ProgressCallback, PublishContext, Publisher, UploadTask } from \"electron-publish\"\nimport { ensureDir, stat, symlink } from \"fs-extra-p\"\nimport mime from \"mime\"\nimport * as path from \"path\"\nimport { Uploader } from \"./uploader\"\n\nexport abstract class BaseS3Publisher extends Publisher {\n  protected constructor(context: PublishContext, private options: BaseS3Options) {\n    super(context)\n  }\n\n  protected abstract getBucketName(): string\n\n  protected configureS3Options(s3Options: CreateMultipartUploadRequest) {\n    // if explicitly set to null, do not add\n    if (this.options.acl !== null) {\n      s3Options.ACL = this.options.acl as ObjectCannedACL || \"public-read\"\n    }\n  }\n\n  protected createClientConfiguration(): ClientConfiguration {\n    return {signatureVersion: \"v4\"}\n  }\n\n  // http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/s3-example-creating-buckets.html\n  async upload(task: UploadTask): Promise<any> {\n    const fileName = path.basename(task.file)\n    const cancellationToken = this.context.cancellationToken\n\n    const target = (this.options.path == null ? \"\" : `${this.options.path}/`) + fileName\n\n    if (process.env.__TEST_S3_PUBLISHER__ != null) {\n      const testFile = path.join(process.env.__TEST_S3_PUBLISHER__!, target)\n      await ensureDir(path.dirname(testFile))\n      await symlink(task.file, testFile)\n      return\n    }\n\n    const s3Options: CreateMultipartUploadRequest  = {\n      Key: target,\n      Bucket: this.getBucketName(),\n      ContentType: mime.getType(task.file) || \"application/octet-stream\"\n    }\n    this.configureS3Options(s3Options)\n\n    const contentLength = task.fileContent == null ? (await stat(task.file)).size : task.fileContent.length\n    const uploader = new Uploader(new S3(this.createClientConfiguration()), s3Options, task.file, contentLength, task.fileContent)\n\n    const progressBar = this.createProgressBar(fileName, uploader.contentLength)\n    if (progressBar != null) {\n      const callback = new ProgressCallback(progressBar)\n      uploader.on(\"progress\", () => {\n        if (!cancellationToken.cancelled) {\n          callback.update(uploader.loaded, uploader.contentLength)\n        }\n      })\n    }\n\n    return await cancellationToken.createPromise((resolve, reject, onCancel) => {\n      onCancel(() => uploader.abort())\n      uploader.upload()\n        .then(() => {\n          try {\n            log.debug({provider: this.providerName, file: fileName, bucket: this.getBucketName()}, \"uploaded\")\n          }\n          finally {\n            resolve()\n          }\n        })\n        .catch(reject)\n    })\n  }\n\n  toString() {\n    return `${this.providerName} (bucket: ${this.getBucketName()})`\n  }\n}\n"],"sourceRoot":""}
